//COMANDO PARA GRUPOS
require('../main.js') 
const fs = require("fs")
const { smsg, getGroupAdmins, formatp, tanggal, formatDate, getTime, isUrl, sleep, clockString, runtime, fetchJson, getBuffer, jsonformat, delay, format, logic, generateProfilePicture, parseMention, getRandom } = require('../libs/fuctions.js'); 
const path = require("path")
const chalk = require("chalk");
const moment = require('moment-timezone') 
const gradient = require('gradient-string') 
const fetch = require('node-fetch') 
const axios = require('axios')
const cheerio = require('cheerio')
const Jimp = require('jimp')
const os = require('os')
require('../main')

async function grupo(m, command, isGroupAdmins, text, conn, participants, isBotAdmins, args, isCreator, delay, sender, quoted, mime, from, isCreator, groupMetadata, fkontak, delay, store) {
if (global.db.data.users[m.sender].registered < true) return m.reply(info.registra)
if (command == 'hidetag' || command == 'notificar' || command == 'tag') {  
if (!m.isGroup) return m.reply(info.group) 
if (!isGroupAdmins) return m.reply(info.admin)
if (!text) return m.reply(`*text?*`) 
conn.sendMessage(m.chat, { text : text ? text : '' , mentions: participants.map(a => a.id)}, { quoted: m, ephemeralExpiration: 24*60*100, disappearingMessagesInChat: 24*60*100})}

if (command == 'grupo') {
if (!m.isGroup) return m.reply(info.group);  
if (!isBotAdmins) return m.reply(info.botAdmin);  
if (!isGroupAdmins) return m.reply(info.admin)
if (!text) return m.reply(`*Action incorrectly used*\n\n*Use this way:*\n*${prefix + command} abrir*\n*${prefix + command} cerrar*`)
if (args[0] === 'abrir') {
m.reply(`*SUCCESSFUL OPEN GROUP‚úÖ*`)
await conn.groupSettingUpdate(m.chat, 'not_announcement')
} else if (args[0] === 'cerrar') {
m.reply(`*SUCCESSFULLY CLOSED GROUPO‚úÖ*`)
await conn.groupSettingUpdate(m.chat, 'announcement')
}}
    
if (command == 'delete' || command == 'del') {
if (!m.quoted) throw false
if (!isBotAdmins) return m.reply(info.botAdmin)
if (!isGroupAdmins) return m.reply(info.admin)
let { chat, fromMe, id} = m.quoted
let delet = m.message.extendedTextMessage.contextInfo.participant
let bang = m.message.extendedTextMessage.contextInfo.stanzaId
return conn.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: bang, participant: delet }})
}
  
if (command == 'join' || command == 'unete') {
let linkRegex = /chat.whatsapp.com\/([0-9A-Za-z]{20,24})/i
let link = (m.quoted ? m.quoted.text ? m.quoted.text : text : text) || text
let [_, code] = link.match(linkRegex) || []
if (global.db.data.users[m.sender].registered < true) return m.reply(info.registra)
if (!code) return m.reply(`*ENTER GROUP LINK*\n\n*üìå EXAMPLE*\n*#join ${nn}*`) 
if ( isCreator || m.fromMe) {
m.reply(`*I ALREADY JOINED üòº*`)
await delay(3 * 3000)
let res = await conn.groupAcceptInvite(code).then((code) => m.reply(jsonformat(code))).catch((err) => m.reply(jsonformat(err)))
//await conn.groupAcceptInvite(code)
} else {
const data = global.owner.filter(([number, _, isDeveloper]) => isDeveloper && number)
await delay(2 * 2000)
for (let jid of data.map(([id]) => [id] + '@s.whatsapp.net').filter(v => v != conn.user.jid)) m.reply(`üìß *Ôº≥ÔºØÔº¨Ôº©Ôº£Ôº©Ôº¥ÔºµÔº§ Ôº∞Ôº°Ôº≤Ôº° ÔºµÔºÆ ÔºßÔº≤ÔºµÔº∞ÔºØ*\n\n*üë§ Ôº≥ÔºØÔº¨Ôº©Ôº£Ôº©Ôº¥Ôº°ÔºÆÔº¥Ôº•*\nwa.me/${m.sender.split('@')[0]}\n\n*üîÆ Ôº•ÔºÆÔº¨Ôº°Ôº£Ôº•*\n${link}`, jid)

m.reply(`*‚úÖ Asif King`)
await delay(25 * 25000)
m.reply(`*[ Best WhatsApp Bot`)}
}

if (command == 'setppgroup' || command == 'setpp') {
if (!m.isGroup) return m.reply(info.group) 
if (!isBotAdmins) return m.reply(info.botAdmin)
if (!isGroupAdmins) return m.reply(info.admin)
if (!quoted) return m.reply(`*‚ö†Ô∏èimage?*`)
if (!/image/.test(mime)) return m.reply(`*‚ö†Ô∏è Respond to one with:* ${prefix + command}`)
if (/webp/.test(mime)) return m.reply(`*‚ö†Ô∏èRespond to an Image with :* ${prefix + command}`)
var mediz = await conn. downloadAndSaveMediaMessage(quoted, 'ppgc.jpeg')
if (args[0] == `full`) {
var { img } = await generateProfilePicture(mediz)
await conn.query({tag: 'iq', attrs: {to: m.chat, type:'set', xmlns: 'w:profile:picture' }, content: [ {tag: 'picture', attrs: { type: 'image' }, content: img } ]}) 
fs.unlinkSync(mediz)
m.reply(`*‚úÖExit*`)
} else {
var memeg = await conn.updateProfilePicture(m.chat, { url: mediz })
fs.unlinkSync(mediz)
m.reply(`*‚úÖExit*`)}}

if (command == 'setppname' || command == 'nuevonombre' || command == 'newnombre') {
if (!m.isGroup) return m.reply(info.group) 
if (!isBotAdmins) return m.reply(info.botAdmin)
if (!isGroupAdmins) return m.reply(info.admin)
if (!text) return m.reply('*‚ö†Ô∏è text*')
await conn.groupUpdateSubject(m.chat, text)
await m.reply(`*‚úÖThe group name was changed correctly*`)}

if (command == 'setdesc' || command == 'descripci√≥n') {
if (!m.isGroup) return m.reply(info.group) 
if (!isBotAdmins) return m.reply(info.botAdmin)
if (!isGroupAdmins) return m.reply(info.admin)
if (!text) return m.reply('*‚ö†Ô∏è text*')
await conn.groupUpdateDescription(m.chat, text)
await m.reply(`*‚úÖThe group description was changed successfully*`)}

if (command == 'anularlink' || command == 'resetlink' || command == 'revoke') {
if (!m.isGroup) return m.reply(info.group) 
if (!isBotAdmins) return m.reply(info.botAdmin)
if (!isGroupAdmins) return m.reply(info.admin)
let res = conn.groupRevokeInvite(m.chat)}

if (command == 'add' || command == 'agregar' || command == 'invitar') {
if (!m.isGroup) return m.reply(info.group);  
if (!isBotAdmins) return m.reply(info.botAdmin)
if (!isGroupAdmins) return m.reply(info.admin)
if (!text) return m.reply(`*[ ‚ö†Ô∏è ] ENTER THE NUMBER OF THE PERSON YOU WANT TO ADD*\n*EXAMPLE:*\n${prefix}add +9234741`)
if (text.includes('+')) return m.reply(`*‚ö†Ô∏è ENTER THE NUMBER WITHOUT IT (+)*`)
let group = m.chat
let link = 'https://chat.whatsapp.com/' + await conn.groupInviteCode(group)
await conn.sendMessage(text+'@s.whatsapp.net', {text: `‚â° *INVITATION*\n\nHello, a user invites you to join this group.\n\n${link}`, mentions: [m.sender]})
m.reply(`*‚úÖReady*`)}

if (command == 'kick' || command == 'echar' || command == 'sacar') {
if (!m.isGroup) return m.reply(info.group) 
if (!isBotAdmins) return m.reply(info.botAdmin)
if (!isGroupAdmins) return m.reply(info.admin)
const kicktext = `*[ ‚ö†Ô∏è ] WHO THE FUCK DO I ELIMINATE?  TAG SOME USER I'M NOT A FORECAST üòØ*`;
if (!m.mentionedJid[0] && !m.quoted) return m.reply(kicktext, m.chat, {mentions: conn.parseMention(kicktext)});
if (m.mentionedJid.includes(conn.user.jid)) return;
const user = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted.sender;
const owr = m.chat.split`-`[0];
await conn.groupParticipantsUpdate(m.chat, [user], 'remove')}

if (command == 'promote' || command == 'darpoder') {
if (!m.isGroup) return m.reply(info.group) 
if (!isBotAdmins) return m.reply(info.botAdmin)
if (!isGroupAdmins) return m.reply(info.admin)
if (!m.mentionedJid[0] && !m.quoted) return m.reply(`*[ ‚ö†Ô∏è ] WHO DO I GIVE ADMIN?  TAG THE PERSON OR RESPOND TO THEIR MESSAGES*`)
let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
await conn.groupParticipantsUpdate(m.chat, [users], 'promote').then((res) => m.reply(jsonformat(res))).catch((err) => m.reply(jsonformat(err)))}

if (command == 'demote' || command == 'quitarpoder') {
if (!m.isGroup) return m.reply(info.group) 
if (!isBotAdmins) return m.reply(info.botAdmin)
if (!isGroupAdmins) return m.reply(info.admin)
if (!m.mentionedJid[0] && !m.quoted) return m.reply(`*[ ‚ö†Ô∏è ] WHO DID I REMOVE ADMINS FROM?  TAG THE PERSON OR RESPOND TO THEIR MESSAGES*`)
let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
await conn.groupParticipantsUpdate(m.chat, [users], 'demote').then((res) => m.reply(jsonformat(res))).catch((err) => m.reply(jsonformat(err)))}

if (command == 'link' || command == 'linkgc') {
if (!m.isGroup) return m.reply(info.group) 
if (!isBotAdmins) return m.reply(info.botAdmin)
let response = await conn.groupInviteCode(m.chat)
conn.sendText(m.chat, `https://chat.whatsapp.com/${response}`, m, { detectLink: true })}

if (command == 'banchat') { 
if (!m.isGroup) return m.reply(info.group) 
if (!isCreator) return m.reply(info.owner) 
if (!text) return m.reply(`*Misused action*\n\n*Use this way:*\n*${prefix + command} on*\n*${prefix + command} off*`)
if (args[0] === "on") {
if (global.db.data.chats[m.chat].isBanned) return m.reply(`*This chat is already banned*`)
global.db.data.chats[m.chat].isBanned = true
m.reply(`*BOT OFF*`)
} else if (args[0] === "off") {  
if (!global.db.data.chats[m.chat].isBanned) return m.reply(`*This chat is not banned*`)
global.db.data.chats[m.chat].isBanned = false
m.reply(`*BOT ONLINE I AM NOW AVAILABLE ‚úÖ*`)}}

if (command == 'tagall' || command == 'invocar' || command == 'todos') {
if (!m.isGroup) return m.reply(info.group) 
if (!isGroupAdmins) return m.reply(info.admin)
const pesan = args.join` `;
const oi = `‚ùë Message: ${pesan}`;
let teks = `‚ùë ‚îÅ„Äî *üì¢ Ôº©ÔºÆÔº∂ÔºØÔº£Ôº°Ôº¥Ôº©ÔºØÔºÆ üì¢* „Äï‚îÅ ‚ùë\n\n`
teks += `${oi}\n\n`
for (let mem of participants) {
teks += `üéà @${mem.id.split('@')[0]}\n`
}
conn.sendMessage(m.chat, { text: teks, mentions: participants.map(a => a.id) }, { quoted: m, ephemeralExpiration: 24*60*100, disappearingMessagesInChat: 24*60*100})}

if (command == 'admins' || command == 'administradores') {
if (!m.isGroup) return m.reply(info.group);  
const pp = await conn.profilePictureUrl(m.chat, 'image').catch((_) => null) || './src/admins.jpg';
const groupAdmins = participants.filter((p) => p.admin);
const listAdmin = groupAdmins.map((v, i) => `${i + 1}. @${v.id.split('@')[0]}`).join('\n‚û• ');
const owner = groupMetadata.owner || groupAdmins.find((p) => p.admin === 'superadmin')?.id || m.chat.split`-`[0] + '@s.whatsapp.net';
const pesan = args.join` `;
const oi = `*·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á:* ${pesan}`;
const text = `‚ïê‚ú™„Äò *Ôº©ÔºÆÔº∂ÔºØÔº£Ôº°ÔºÆÔº§ÔºØ Ôº°Ôº§Ôº≠Ôº©ÔºÆÔº≥* „Äô‚ú™‚ïê\n\n‚Ä¢ *…¢ Ä·¥è·¥ú·¥ò:* [ ${groupMetadata.subject} ]\n\n‚Ä¢ ${oi}\n\n‚Ä¢ *·¥Ä·¥Ö·¥ç…™…¥s:*\n‚û• ${listAdmin}\n\n*[ ‚ö† Ô∏è] ·¥ús·¥Ä Ä ·¥ás·¥õ·¥á ·¥Ñ·¥è·¥ç·¥Ä…¥·¥Ö·¥è s·¥è ü·¥è ·¥Ñ·¥ú·¥Ä…¥·¥Ö·¥è s·¥á ·¥õ Ä·¥Ä·¥õ·¥á ·¥Ö·¥á ·¥ú…¥·¥Ä ·¥á·¥ç·¥á Ä…¢·¥á…¥·¥Ñ…™·¥Ä*`.trim();
conn.sendMessage(m.chat, { text: text, mentions: participants.map(a => a.id) }, { quoted: m, ephemeralExpiration: 24*60*100, disappearingMessagesInChat: 24*60*100})}

if (command == 'infogrupo' || command == 'groupinfo') {
if (!m.isGroup) return m.reply(info.group);  
const pp = await conn.profilePictureUrl(m.chat, 'image').catch((_) => null) || './src/avatar_contact.png';
const {welcome, antilink, antiFake, antiArabe, detect, autosticker, antiNsfw, modeadmin} = global.db.data.chats[m.chat];
const groupAdmins = participants.filter((p) => p.admin);
const listAdmin = groupAdmins.map((v, i) => `${i + 1} @${v.id.split('@')[0]}`).join('\n ');
const owner = groupMetadata.owner || groupAdmins.find((p) => p.admin === 'superadmin')?.id || m.chat.split`-`[0] + '@s.whatsapp.net';
const text = `‚ï≠‚îÅ‚îÅ[ .‚ãÖ …¢ Ä·¥è·¥ú·¥ò …™…¥Íú∞·¥è ‚ãÖ]‚îÅ‚îÅ‚îÅ‚¨£ 
*üî∏Ô∏è …™·¥Ö:*
‚Ä¢ ${groupMetadata.id}

*üî∏Ô∏è …¥·¥Ä·¥ç·¥á* : 
‚Ä¢ ${groupMetadata.subject}

*üî∏Ô∏è ·¥ç·¥á·¥ç ô·¥á ÄÍú±* :
‚Ä¢ ${participants.length} Participantes

*üî∏Ô∏è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä:*
‚Ä¢ @${owner.split('@')[0]}

*üî∏Ô∏è ·¥Ä·¥Ö·¥ç…™…¥s:*
 ${listAdmin}

*üî∏Ô∏è …¢ Ä·¥è·¥ú·¥ò Íú±·¥á·¥õ·¥ú·¥ò:*
‚Ä¢ Welcome: ${welcome ? '‚úÖ' : '‚ùå'}
‚Ä¢ Antilink: ${antilink ? '‚úÖ' : '‚ùå'}
‚Ä¢ Antifake: ${antiFake ? '‚úÖ' : '‚ùå'}
‚Ä¢ Antiarabe : ${antiArabe ? '‚úÖ' : '‚ùå'}
‚Ä¢ Detect: ${detect ? '‚úÖ' : '‚ùå'}
‚Ä¢ Autostickers: ${autosticker ? '‚úÖ' : '‚ùå'}
‚Ä¢ modocaliente: ${antiNsfw ? '‚úÖ' : '‚ùå'}
‚Ä¢ modoadmins: ${modeadmin ? '‚úÖ' : '‚ùå'}

*üî∏Ô∏è ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥* :
‚Ä¢ ${groupMetadata.desc?.toString() || 'desconocido'}`.trim();
conn.sendFile(m.chat, pp, 'error.jpg', text, m, false, {mentions: [...groupAdmins.map((v) => v.id), owner]})}

if (command == 'warn' || command == 'advertencia') {
if (!m.isGroup) return m.reply(info.group);  
if (!isBotAdmins) return m.reply(info.botAdmin);  
if (!isGroupAdmins) return m.reply(info.admin)
let war = global.maxwarn 
let who
if (m.isGroup) who = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : false
else who = m.chat
if (!who) return m.reply(`[ ‚ö†Ô∏è ] ·¥á·¥õ…™«´·¥ú·¥á·¥õ·¥Ä/·¥ç·¥á…¥·¥Ñ…™·¥è…¥·¥Ä ·¥Ä ·¥Ä ü…¢·¥ú…™·¥á…¥\n\nüìå ·¥á·¥ä·¥á·¥ç·¥ò ü·¥è : ${prefix + command} @user`) 
if (!(who in global.db.data.users)) return m.reply(`‚ú≥Ô∏è ·¥á ü ·¥ús·¥ú·¥Ä Ä…™·¥è …¥·¥è s·¥á ·¥á…¥·¥Ñ·¥ú·¥á…¥·¥õ Ä·¥Ä ·¥á…¥ ·¥ç…™  ô·¥Äs·¥á ·¥Ö·¥á ·¥Ö·¥Ä·¥õ·¥ès`)  
let name = conn.getName(m.sender)
let warn = global.db.data.users[who].warn
if (warn < war) {
global.db.data.users[who].warn += 1
conn.sendMessage(m.chat, { text: `‚ï≠‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà
‚îù ‚ö†Ô∏è *·¥úÍú±·¥á Ä ·¥°·¥Ä Ä…¥…™…¥…¢* ‚ö†Ô∏è
‚îä‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà
‚îä ‚Ä¢ *ùöÑùöú·¥á Ä:* @${who.split`@`[0]}
‚îä ‚Ä¢ *ùô∞ùöçùöñùöíùöóùöú:* ${name}
‚îä ‚Ä¢ *·¥°·¥Ä Ä…¥:* ${warn + 1}/${war}
‚îä ‚Ä¢ *ùöÅeason:* ü´µüèæ ${text}
‚ï∞‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà`, mentions: [who]}, { quoted: m, ephemeralExpiration: 24*60*100, disappearingMessagesInChat: 24*60*100})
await delay(2000)
m.reply(`‚ö†Ô∏è *ùô∞ùô≥ùöÖùô¥ùöÅùöÉùô¥ùôΩùô≤ùô∏ùô∞* ‚ö†Ô∏è
ùöÅùöéùöåùöíùöãùöíùöúùöùùöé ùöûùöóùöä ùöäùöçùöüùöéùöõùöùùöéùöóùöåùöíùöä ùöçùöé ùöûùöó ùöäùöçùöñùöíùöó

‚Ä¢ *ùô∞ùöçùöüùöéùöõùöùùöéùöóùöåùöíùöä:* ${warn + 1}/${war} 
ùöúùöí ùöõùöéùöåùöíùöãùöéùöú *${war}* ùöäùöçùöüùöéùöõùöùùöéùöóùöåùöíùöäùöú ùöúùöéùöõùöäùöú ùöéùöïùöíùöñùöíùöóùöäùöçùöò ùöäùöûùöùùöòùöñùöäùöùùöíùöåùöäùöñùöéùöóùöùùöé ùöçùöéùöï ùöêùöõùöûùöôùöò`, who)
} else if (warn == war) {
global.db.data.users[who].warn = 0
m.reply(`‚õî ùô¥ùöï ùöûùöúùöûùöäùöõùöíùöò ùöúùöûùöôùöéùöõùöò ùöïùöäùöú *${war}* ùöäùöçùöüùöéùöõùöùùöéùöóùöåùöíùöäùöú ùöôùöòùöõ ùöïùöò ùöùùöäùöóùöùùöò ùöúùöéùöõùöä ùöéùöïùöíùöñùöíùöóùöäùöçùöò`)
await delay(3000)
await conn.groupParticipantsUpdate(m.chat, [who], 'remove')}}

if (command == 'unwarn' || command == 'quitardvertencia') {
if (!m.isGroup) return m.reply(info.group);  
if (!isBotAdmins) return m.reply(info.botAdmin);  
if (!isGroupAdmins) return m.reply(info.admin)
let who 
if (m.isGroup) who = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : false
else who = m.chat
if (!who) return m.reply(`[ ‚ö†Ô∏è ] ·¥á·¥õ…™«´·¥ú·¥á·¥õ·¥Ä/·¥ç·¥á…¥·¥Ñ…™·¥è…¥·¥Ä ·¥Ä ·¥Ä ü…¢·¥ú…™·¥á…¥`) 
if (!(who in global.db.data.users)) return m.reply(`‚ú≥Ô∏è ·¥á ü ·¥ús·¥ú·¥Ä Ä…™·¥è …¥·¥è s·¥á ·¥á…¥·¥Ñ·¥ú·¥á…¥·¥õ Ä·¥Ä ·¥á…¥ ·¥ç…™  ô·¥Äs·¥á ·¥Ö·¥á ·¥Ö·¥Ä·¥õ·¥ès`) 
let warn = global.db.data.users[who].warn
if (warn > 0) {
global.db.data.users[who].warn -= 1
m.reply(`‚ï≠‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà
‚îù ‚ö†Ô∏è *ùöÇùô¥ ùöÄùöÑùô∏ùöÉùôæ ùöÑùôΩùô∞ ùô∞ùô≥ùöÖùô¥ùöÅùöÉùô¥ùôΩùô≤ùô∏ùô∞* ‚ö†Ô∏è 
‚îä‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà
‚îä ‚Ä¢ ·¥°·¥Ä Ä…¥: *-1*
‚îä ‚Ä¢ ·¥Ä·¥Ö·¥†·¥á Ä·¥õ·¥á…¥·¥Ñ…™·¥Äs ·¥õ·¥è·¥õ·¥Ä ü: *${warn - 1}*
‚ï∞‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà`)
await delay(3000)
m.reply(`üî∏Ô∏è ·¥ú…¥ ·¥Ä·¥Ö·¥ç…™…¥  Ä·¥á·¥Ö·¥ú·¥ä·¥è s·¥ú ·¥Ä·¥Ö·¥†·¥á Ä·¥õ·¥á…¥·¥Ñ…™·¥Ä, ·¥Ä ú·¥è Ä·¥Ä ·¥õ…™·¥á…¥·¥ás *${warn - 1}*`, who)
} else if (warn == 0) {
m.reply('üî∏Ô∏è ·¥á ü ·¥ús·¥ú·¥Ä Ä…™·¥è …¥·¥è ·¥õ…™·¥á…¥·¥á …¥…™…¥…¢·¥ú…¥·¥Ä ·¥Ä·¥Ö·¥†·¥á Ä·¥õ·¥á…¥·¥Ñ…™·¥Ä')}}

if (command == 'listwarn') {
const adv = Object.entries(global.db.data.users).filter((user) => user[1].warn);
const warns = global.db.data.users.warn;
const user = global.db.data.users;
const imagewarn = './src/warn.jpg';
const caption = `‚ö†Ô∏è ùöÑùöÇùô¥ùöÅùöÇ ùöÜùô∞ùöÅùôΩùô∏ùôΩùô∂\n 
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê¬∑‚Ä¢
‚ïë *ùöÉùöòùöùùöäùöï : ${adv.length} ùöÑùöúùöéùöõ* ${adv ? '\n' + adv.map(([jid, user], i) => `
‚ïë
‚ïë 1.- ${isCreator ? '@' + jid.split`@`[0] : jid} *(${user.warn}/4)*\n‚ïë\n‚ïë - - - - - - - - -`.trim()).join('\n') : ''}
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê¬∑‚Ä¢`;
conn.sendMessage(m.chat, {text: caption, contextInfo:{ mentionedJid: [...caption.matchAll(/@(\d{0,16})/g)].map(v => v[1] + '@s.whatsapp.net')}}, {quoted: m, ephemeralExpiration: 24*60*100, disappearingMessagesInChat: 24*60*100})}

if (command == 'enline' || command == 'online' || command == 'listonine' || command == 'listaenlinea' || command == 'enlinea' || command == 'listonline') {
if (!m.isGroup) return m.reply(info.group);  
let id = args && /\d+\-\d+@g.us/.test(args[0]) ? args[0] : m.chat
let online = [...Object.keys(store.presences[id]), numBot]
conn.sendText(m.chat, '*ITS ONLINE üòé :*\n\n' + online.map(v => '‚ùë @' + v.replace(/@.+/, '')).join`\n`, m, { mentions: online })}}

module.exports = { grupo }

let file = require.resolve(__filename)
fs.watchFile(file, () => {
fs.unwatchFile(file)
console.log(chalk.redBright(`Update ${__filename}`))
delete require.cache[file]
require(file)
})
